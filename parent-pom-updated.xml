<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>
    <artifactId>parent-pom</artifactId>
    <groupId>hoatv</groupId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <java.compile.version>21</java.compile.version>
        <freemarker.version>2.3.30</freemarker.version>
        <lombok.version>1.18.30</lombok.version>
        <hamcrest.version>1.3</hamcrest.version>
        <jsoup.version>1.15.4</jsoup.version>
        <common-io.version>2.15.0</common-io.version>
        <common-lang3.version>3.14.0</common-lang3.version>
        <reflections.version>0.9.12</reflections.version>
        <commons-pool2.version>2.9.0</commons-pool2.version>
        <jackson-databind.version>2.16.0</jackson-databind.version>
        <commons-collections4.version>4.4</commons-collections4.version>
        <log4j.version>2.20.0</log4j.version>
        <posgresql.version>42.6.0</posgresql.version>
        <commons-text.version>1.11.0</commons-text.version>
        <commons-collections4.version>4.4</commons-collections4.version>
        <logback.version>1.4.6</logback.version>
        <logstash-logback-encoder.version>7.4</logstash-logback-encoder.version>
        <version.keycloak>18.0.0</version.keycloak>
        <spring-cloud.version>2023.0.3</spring-cloud.version>
        <spring-cloud-sleuth-otel.version>1.1.0-M6</spring-cloud-sleuth-otel.version>

        <!-- maven plugins versions -->
        <springboot.version>3.5.5</springboot.version>
        <maven.compiler.version>3.11.0</maven.compiler.version>
        <maven.deploy.version>3.1.1</maven.deploy.version>
        <maven-surefire-plugin.version>3.2.2</maven-surefire-plugin.version>

        <!-- docker images version -->
        <elk.version>9.0.2</elk.version>
        <logstash.service.name>logstash</logstash.service.name>
        <logstash.udp.port>5959</logstash.udp.port>
        <logstash.tcp.port>5858</logstash.tcp.port>
        <elasticsearch.service.name>elasticsearch</elasticsearch.service.name>
        <elasticsearch.port>9200</elasticsearch.port>
        <apm.server.port>8200</apm.server.port>
        <apm.server.service.name>apmserver</apm.server.service.name>
        <apm.agent.version>1.44.0</apm.agent.version>
        <kibana.service.name>kibana</kibana.service.name>
        <kibana.port>5601</kibana.port>

        <!-- Expose services-->
        <action.manager.service.name>action-manager-backend</action.manager.service.name>
        <action.manager-ui.service.name>action-manager-ui</action.manager-ui.service.name>
        <ecommerce.stats.service.name>e-commerce-stats</ecommerce.stats.service.name>
        <ext.endpoint.collector.service.name>endpoint-collector-backend</ext.endpoint.collector.service.name>
        <ext.endpoint.collector-ui.service.name>endpoint-collector-ui</ext.endpoint.collector-ui.service.name>
        <template.manager.service.name>template-manager-backend</template.manager.service.name>
        <template.manager-ui.service.name>template-manager-ui</template.manager-ui.service.name>
        <spring.kafka.notifier.service.name>spring-kafka-notifier</spring.kafka.notifier.service.name>

        <!--suppress UnresolvedMavenProperty -->
        <docker.repo>tranvanhoa2810</docker.repo>
        <docker.image.name>${docker.repo}/${project.artifactId}</docker.image.name>
        <docker.image.tag>${project.version}</docker.image.tag>

        <!--suppress UnresolvedMavenProperty -->
        <docker.python.base>3.8.10-alpine</docker.python.base>
        <json-path.version>2.6.0</json-path.version>
        <r2dbc-postgresql.version>0.8.12.RELEASE</r2dbc-postgresql.version>
        <h2.version>2.1.214</h2.version>
        <resilience4j.version>2.2.0</resilience4j.version>

        <!-- Sonar cloud configuration -->
        <sonar.organization>hvantran</sonar.organization>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar-maven-plugin.version>3.10.0.2594</sonar-maven-plugin.version>

        <micrometer-registry-prometheus.version>1.12.0</micrometer-registry-prometheus.version>
        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
        <opentelemetry-bom.version>1.15.0</opentelemetry-bom.version>
        <graaljs.version>22.3.0</graaljs.version>
        <snakeyaml.version>2.0</snakeyaml.version>
        <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
        <native-maven-plugin.version>0.9.22</native-maven-plugin.version>
        <springdoc-openapi-starter-webmvc-ui.version>2.3.0</springdoc-openapi-starter-webmvc-ui.version>
        <mongock-bom.version>4.1.19</mongock-bom.version>
        <mockito-core.version>5.18.0</mockito-core.version>
        <spring-kafka-test.version>3.2.0</spring-kafka-test.version>
        <embed-mongo.version>4.11.0</embed-mongo.version>
        <testcontainers.version>1.19.3</testcontainers.version>
        <jacoco-maven-plugin.version>0.8.11</jacoco-maven-plugin.version>
    </properties>

    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <dockerfile.skip>false</dockerfile.skip>
                <springdoc.swagger-ui.enabled>true</springdoc.swagger-ui.enabled>
                <springdoc.api-docs.enabled>true</springdoc.api-docs.enabled>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <dockerfile.skip>true</dockerfile.skip>
                <springdoc.swagger-ui.enabled>true</springdoc.swagger-ui.enabled>
                <springdoc.api-docs.enabled>true</springdoc.api-docs.enabled>
                <spring.profiles.active>test</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>stage</id>
            <properties>
                <dockerfile.skip>false</dockerfile.skip>
                <springdoc.swagger-ui.enabled>true</springdoc.swagger-ui.enabled>
                <springdoc.api-docs.enabled>true</springdoc.api-docs.enabled>
                <spring.profiles.active>stage</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <dockerfile.skip>false</dockerfile.skip>
                <springdoc.swagger-ui.enabled>true</springdoc.swagger-ui.enabled>
                <springdoc.api-docs.enabled>true</springdoc.api-docs.enabled>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
        </profile>
        <profile>
            <id>native</id>
            <properties>
                <dockerfile.skip>true</dockerfile.skip>
                <springdoc.swagger-ui.enabled>true</springdoc.swagger-ui.enabled>
                <springdoc.api-docs.enabled>true</springdoc.api-docs.enabled>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.graalvm.buildtools</groupId>
                            <artifactId>native-maven-plugin</artifactId>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>
            <!-- Import Spring Boot BOM for consistent dependency versions -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.freemarker</groupId>
                <artifactId>freemarker</artifactId>
                <version>${freemarker.version}</version>
            </dependency>
            <dependency>
                <groupId>org.reflections</groupId>
                <artifactId>reflections</artifactId>
                <version>${reflections.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-pool2</artifactId>
                <version>${commons-pool2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>${commons-text.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons-collections4.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson-databind.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jsoup</groupId>
                <artifactId>jsoup</artifactId>
                <version>${jsoup.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>6.1.14</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.kafka</groupId>
                <artifactId>spring-kafka</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-mongodb</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${springboot.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-r2dbc</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>io.r2dbc</groupId>
                <artifactId>r2dbc-postgresql</artifactId>
                <version>${r2dbc-postgresql.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-webflux</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-oauth2-client</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-prometheus</artifactId>
                <version>${micrometer-registry-prometheus.version}</version>
            </dependency>
            
            <!-- Resilience4j Dependencies -->
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-spring-boot3</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-reactor</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-ratelimiter</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-circuitbreaker</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-core</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-annotations</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-micrometer</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-consumer</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-circularbuffer</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-timelimiter</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-bulkhead</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>
            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-retry</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
                <version>${springdoc-openapi-starter-webmvc-ui.version}</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${posgresql.version}</version>
            </dependency>
            <dependency>
                <groupId>com.jayway.jsonpath</groupId>
                <artifactId>json-path</artifactId>
                <version>${json-path.version}</version>
            </dependency>
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>

            <!-- Graal script engine replace Nashorn from Java 15+ -->
            <dependency>
                <groupId>org.graalvm.js</groupId>
                <artifactId>js</artifactId>
                <version>${graaljs.version}</version>
            </dependency>
            <dependency>
                <groupId>org.graalvm.js</groupId>
                <artifactId>js-scriptengine</artifactId>
                <version>${graaljs.version}</version>
            </dependency>

            <!-- Logging with log4j -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!--Migration dependencies-->
            <dependency>
                <groupId>com.github.cloudyrock.mongock</groupId>
                <artifactId>mongock-bom</artifactId>
                <version>${mongock-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Test dependencies -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <version>${springboot.version}</version>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito-core.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Kafka Test Dependencies -->
            <dependency>
                <groupId>org.springframework.kafka</groupId>
                <artifactId>spring-kafka-test</artifactId>
                <version>${spring-kafka-test.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- Embedded MongoDB -->
            <dependency>
                <groupId>de.flapdoodle.embed</groupId>
                <artifactId>de.flapdoodle.embed.mongo</artifactId>
                <version>${embed-mongo.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- Testcontainers -->
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>kafka</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>mongodb</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${common-io.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${commons-collections4.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>${commons-text.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${common-lang3.version}</version>
        </dependency>

        <!-- Logging with logback -->
        <!-- Let Spring Boot manage logback-core and logback-classic versions -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash-logback-encoder.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <release>${java.compile.version}</release>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven.deploy.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>${dockerfile-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>default</id>
                            <goals>
                                <goal>build</goal>
                                <goal>push</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>tag-latest</id>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <tag>latest</tag>
                            </configuration>
                        </execution>
                        <execution>
                            <id>tag-version</id>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <tag>${docker.image.tag}</tag>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <repository>${docker.image.name}</repository>
                        <dockerfile>${project.build.directory}/classes/Dockerfile</dockerfile>
                        <contextDirectory>${project.build.directory}</contextDirectory>
                        <buildArgs>
                            <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                        </buildArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${springboot.version}</version>
                    <executions>
                        <!--<execution>
                            <id>process-aot</id>
                            <goals>
                                <goal>process-aot</goal>
                            </goals>
                        </execution>-->
                        <execution>
                            <id>repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                        <!--<image>
                            <builder>paketobuildpacks/builder:tiny</builder>
                            <env>
                                <BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
                            </env>
                        </image>-->
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec-maven-plugin.version}</version>
                    <executions>
                        <!-- Required: The following will ensure `yarn install` is called
                             before anything else during the 'Default Lifecycle' -->
                        <execution>
                            <id>npm install (initialize)</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>initialize</phase>
                            <configuration>
                                <executable>yarn</executable>
                                <arguments>
                                    <argument>install</argument>
                                </arguments>
                            </configuration>
                        </execution>
                        <!-- Required: The following will ensure `yarn install` is called
                             before anything else during the 'Clean Lifecycle' -->
                        <execution>
                            <id>npm install (clean)</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>pre-clean</phase>
                            <configuration>
                                <executable>yarn</executable>
                                <arguments>
                                    <argument>install</argument>
                                </arguments>
                            </configuration>
                        </execution>
                        <!-- Required: This following calls `yarn run build` where 'build' is
                             the script name I used in my project, change this if yours is
                                 different -->
                        <execution>
                            <id>npm run build (compile)</id>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <phase>compile</phase>
                            <configuration>
                                <executable>yarn</executable>
                                <arguments>
                                    <argument>run</argument>
                                    <argument>build</argument>
                                </arguments>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.graalvm.buildtools</groupId>
                    <artifactId>native-maven-plugin</artifactId>
                    <version>${native-maven-plugin.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                        <metadataRepository>
                            <enabled>true</enabled>
                        </metadataRepository>
                        <requiredVersion>22.3</requiredVersion>
                    </configuration>
                    <executions>
                        <execution>
                            <id>add-reachability-metadata</id>
                            <goals>
                                <goal>add-reachability-metadata</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco-maven-plugin.version}</version>
                    <configuration>
                        <excludes>
                            <exclude>**/models/*</exclude>
                            <exclude>**/dtos/*</exclude>
                            <exclude>**/config/*</exclude>
                            <exclude>**/exceptions/*</exclude>
                            <exclude>**/repositories/*</exclude>
                            <exclude>**/utils/*</exclude>
                            <exclude>**/api/*</exclude>
                            <exclude>**/collections/*</exclude>
                        </excludes>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
